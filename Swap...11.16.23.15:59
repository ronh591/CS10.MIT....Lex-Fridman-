#include <string>
#include <iostream>

using namespace std;

void A(int B[5])
{
 int temp = B[0];
 B[0]=B[1];
 B[1]= temp;
}
int main()
{int C[5]={1,2,3,4,5};
for(int i=0; i < 5; i++)
{
  cout << C[i] << " ";
}
cout << endl;
A(C);
cout << "after swap: " << endl;
for (int i = 0; i < 5; i++)
{
  cout << C[i] << " ";
}
cout << endl;
return 0;
}
/*1 2 3 4 5 
after swap: 
2 1 3 4 5 
void swapShellsFirstInArray(int basket[5])
{
int temp = basket[0];
basket[0] = basket[1];
basket[1] = temp;
}
Note that in this example, the & is missing.  This is because in c++, an array is always a reference.  When you pass an array to a function,
you are automatically passing it by reference, so you can't use the &.  If you try to use the &, you will get a compiler error.  Every time you pass an array, 
you are passing the original array, not a copy.
POINTS TO MEMORY ADDRESS=PASS BY REFERENCE

In main, create an array, fill it with values and call the swapShellsFirstInArray:

int collection[5] = {1, 2, 3, 4, 5};
swapShellsFirstInArray(collection);
Use a loop to cout the contents of the array: once before calling the functions and then again, after calling the functions. to test the function.  
If the swap worked, the first two elements will have swapped places, while the remaining values stayed the same:  2, 1, 3, 4, 5
OUTPUT::::::1 2 3 4 5 
after swap: 
2 1 3 4 5 */
